#!/opt/local/bin/bash
IFS=$'\n\t'
shopt -s nullglob nocaseglob

# modern bash version check
! [ "${BASH_VERSINFO:-0}" -ge 4 ] && echo "This script requires bash v4 or later" && exit 1

# read defaults from config
if [[ -f "${HOME}/.macsl" ]]; then
  source "${HOME}/.macsl"
fi

# Check for launchd mode
if [[ $LAUNCHD_MODE == 1 ]]; then
  echo "Launchd Mode enabled"
else
  LAUNCHD_MODE=0
fi

# check for vm_path
if [[ -v ${VM_PATH} ]]; then
  VM_PATH="$HOME/vm/macsl"
  echo "VM_PATH set to default $VM_PATH"
else
  echo "VM_PATH is $VM_PATH"
fi

# check for hypervisor
if [[ -v ${VM_HYPERVISOR} ]]; then
  echo "VM_HYPERVISOR set to default qemu"
  VM_HYPERVISOR="qemu" # qemu vmware
else
  echo "VM_HYPERVISOR is $VM_HYPERVISOR"
fi

# check for qemu_cmd
if [[ -v ${QEMU_CMD} ]]; then
  QEMU_CMD="echo \"qemu cmd unset in ~/.macsl config file\""
  echo "QEMU_CMD $QEMU_CMD"
else
  echo "QEMU_CMD is $QEMU_CMD"
fi

# Set strict mode after reading env vars
set -euo pipefail

# Define global variables and set defaults
VM_BOOT=0
LAUNCHD_SETUP=0
VM_REBOOT=0
VM_SHUTDOWN=0
VM_IP=0

# print out usage
usage() {
  cat <<EOF
USAGE: ./macsl -b -v ~/vm/linux.vmx
OPTIONS:
   -l    Setup launchd
   -b    Boot up the VM
   -r    Rebot the VM
   -s    Shutdown the VM
   -v    Path to vmx file
   -i    Output the VM IP
   -h    Help
EOF
  exit 0
}

# process options and arguments
while getopts "lbrsv:ih" OPTION; do
  case $OPTION in
  l) LAUNCHD_SETUP=1 ;;
  b) VM_BOOT=1 ;;
  r) VM_REBOOT=1 ;;
  s) VM_SHUTDOWN=1 ;;
  v) VM_PATH="$OPTARG" ;;
  i) VM_IP=1 ;;
  h) usage && exit 0 ;;
  *) usage && exit 0 ;;
  esac
done

# catch no options
if [[ $(($LAUNCHD_SETUP + $VM_BOOT + $VM_SHUTDOWN + $VM_IP + $VM_REBOOT + $LAUNCHD_MODE)) == "0" ]]; then
  usage && exit 0
fi

# path to self and parent dir
#SCRIPT=$(realpath "$0")
#SCRIPTPATH=$(dirname "$SCRIPT")

# fusion path
if [[ -e "/Applications/VMware Fusion Tech Preview.app/Contents/Public" ]]; then
  FUSION_PATH="/Applications/VMware Fusion Tech Preview.app/Contents/Public"
else
  FUSION_PATH="/Applications/VMware Fusion.app/Contents/Public"
fi

# functions for doing the stuff
launchd_setup() {
  echo "LAUNCHD SETUP"
  if launchctl list com.blakegarner.macsl >/dev/null 2>&1; then
    echo "Starting com.blakegarner.macsl launchd service"
    launchctl bootout gui/$UID/com.blakegarner.macsl
  fi
  echo "Writing launchd plist to ${HOME}/Library/LaunchAgents/com.blakegarner.macsl.plist"
  tee ${HOME}/Library/LaunchAgents/com.blakegarner.macsl.plist >/dev/null <<-PLIST
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>EnvironmentVariables</key>
  <dict>
    <key>LAUNCHD_MODE</key>
    <string>1</string>
    <key>PATH</key>
    <string>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/Library/Apple/usr/bin:$FUSION_PATH</string>
  </dict>
  <key>KeepAlive</key>
  <dict>
    <key>SuccessfulExit</key>
    <true/>
  </dict>
  <key>Label</key>
  <string>com.blakegarner.macsl</string>
  <key>ProgramArguments</key>
  <array>
    <string>$HOME/code/macsl/macsl</string>
    <string>-b</string>
    <string>-v</string>
    <string>$VM_PATH</string>
  </array>
  <key>RunAtLoad</key>
  <true/>
  <key>StandardOutPath</key>
  <string>$HOME/Library/Logs/com.blakegarner.macsl.log</string>
  <key>StandardErrorPath</key>
  <string>$HOME/Library/Logs/com.blakegarner.macsl.log</string>
</dict>
</plist>
PLIST
  echo "Starting com.blakegarner.macsl launchd service"
  launchctl bootstrap gui/$UID "${HOME}/Library/LaunchAgents/com.blakegarner.macsl.plist"
  launchctl list com.blakegarner.macsl
}

# launchd mode
launchd_mode() {
  trap "echo trapped EXIT && vm_shutdown && break" EXIT
  trap "echo trapped SIGHUP && vm_shutdown && break" SIGHUP
  trap "echo trapped SIGINT && vm_shutdown && break" SIGINT
  trap "echo trapped SIGTERM && vm_shutdown && break" SIGTERM
  vm_boot
  while :; do
    echo "macsl loop started"
    sleep 86400
  done
  # setup traps for restart and shutdown
  # start loop
  # startup macsl VM
  # on shutdown signal stop vm & exit clean
  # on restart signal restart vm
}

vm_boot() {
  echo "VM BOOT"
  if [[ $VM_HYPERVISOR == "qemu" ]]; then

    # tmux new session called macsl to host the qemu session
    if ! (tmux has-session -t macsl 2>/dev/null); then
      tmux new-session -d -s macsl -n macsl
    fi

    # check if existing qemu is running in the macsl session
    # only start a if one isn't already running. 

    # start qemu in a tmux session
    tmux respawn-window -t macsl -c "$VM_PATH" -k "$QEMU_CMD"

  elif [[ $VM_HYPERVISOR == "vmware" ]]; then
    vmrun start "$VM_PATH" nogui
  fi
}

vm_reboot() {
  echo "VM REBOOT"
  if [[ $VM_HYPERVISOR == "qemu" ]]; then
    tmux send-keys -t macsl system_reset Enter
  fi
  if [[ $VM_HYPERVISOR == "vmware" ]]; then
    vmrun reset "$VM_PATH" hard
  fi
}

vm_shutdown() {
  echo "VM SHUTDOWN"
    if [[ $VM_HYPERVISOR == "qemu" ]]; then
    tmux send-keys -t macsl system_powerdown Enter
  fi
  if [[ $VM_HYPERVISOR == "vmware" ]]; then
    vmrun stop "$VM_PATH" hard
  fi
}

vm_path() {
  # echo "VM PATH: $VM_PATH"
  if [[ ! -d "$VM_PATH" ]]; then
    echo "The path $VM_PATH is not valid"
    usage
    exit 1
  fi

  #  if ! [[ "$VM_PATH" =~ .*\.vmx ]]; then
  #    echo "The file $(basename $VM_PATH) does not have a .vmx extention"
  #    usage
  #    exit 1
  #  fi
}

vm_ip() {
  echo "VM IP"
  vmrun getGuestIPAddress $VM_PATH
}

# script flow logic
if [[ $LAUNCHD_MODE == 1 ]]; then
  echo "Launchd Mode"
  launchd_mode
fi

if [[ $VM_PATH != 0 ]]; then
  echo "running vm path"
  vm_path
fi

if [[ $LAUNCHD_SETUP == 1 ]]; then
  launchd_setup
fi

if [[ $VM_BOOT == 1 ]]; then
  vm_boot
fi

if [[ $VM_REBOOT == 1 ]]; then
  vm_reboot
fi

if [[ $VM_SHUTDOWN == 1 ]]; then
  vm_shutdown
fi

if [[ $VM_IP == 1 ]]; then
  vm_ip
fi

echo "End of Line..."
exit 0
